{"version":3,"sources":["logo.svg","Components/Participant.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Participant","props","htmlFor","name","type","value","id","onChange","handleChecked","checked","participating","App","componentDidMount","setState","count","state","participants","length","e","changeStatus","map","element","truecount","handleRadio","radio","Number","target","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","handleSubmit","temp2","part","filter","actualParticipants","parGroup","ceil","result","document","getElementById","innerHTML","j","k","pop","allParti","this","key","uuid","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f9ecc61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nconst Participant = (props) => {\n    \n    return (\n        <label htmlFor={props.name}>\n            <input\n                type=\"checkbox\"\n                name={props.name}\n                value={props.name}\n                id={props.name}\n                onChange={()=>props.handleChecked(props.name)}\n                checked={props.participating}/>\n                {props.name}\n        </label>\n    );\n}\n        \nexport default Participant;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Participant from './Components/Participant'\nimport './App.css';\nimport uuid from 'react-uuid'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      participants: [\n        { name: 'Ali', participating: true },\n        { name: 'Andthen', participating: true },\n        { name: 'Eric', participating: true },\n        { name: 'Georg', participating: true },\n        { name: 'Klaus', participating: true },\n        { name: 'Michael', participating: true },\n        { name: 'Mustafa', participating: true },\n        { name: 'Navid', participating: true },\n        { name: 'Rezan', participating: true },\n        { name: 'Ricardo', participating: true },\n        { name: 'Rihab', participating: true },\n        { name: 'Salah', participating: true },\n        { name: 'Waheel', participating: true }\n      ],\n      radio: 2,\n      actualParticipants: [],\n      count: 0\n     }\n     \n  }\n  componentDidMount = () => {\n    this.setState({ count: this.state.participants.length });\n   }\n  handleChecked = (e) => {\n    const changeStatus = this.state.participants.map(element => {\n      if (element.name === e) {\n        element.participating = !element.participating\n      } \n      return element\n    })\n    this.setState({ participants: changeStatus });\n    this.truecount(this.state.participants)\n  }\n  handleRadio = (e) => {\n    this.setState({ radio: Number(e.target.value) }); \n  }\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  truecount = () => {\n    let count = 0;\n    this.state.participants.map(element => {\n      if (element.participating === true) {\n        count = count + 1\n      } \n    })\n    this.setState({ count });\n  }\n  handleSubmit = () => {\n    let temp = []\n    temp = this.state.participants.map(part => {\n      if (part.participating) {\n        return part.name;\n      }\n    })\n    let temp2 = temp.filter(part => {\n      return typeof part ==='string';\n    })\n    this.shuffle(temp2)\n    this.setState({ actualParticipants: temp2 });\n    let parGroup = (Math.ceil(temp2.length/this.state.radio))\n    let result = document.getElementById('result');\n    result.innerHTML = \"\";\n    for (let j = 1; j<=this.state.radio; j++) {\n        for (let k = 1; k<=parGroup; k++) {\n            result.innerHTML += `<p><strong>Gruppe ${j}:</strong> ${temp2.pop()}</p>`;\n            if (temp2.length === 0) {\n              break\n            }\n        }\n    }\n    \n  }\n  render() { \n    \n    const allParti = this.state.participants.map(e =>\n      <Participant \n      key={uuid()}\n      name={e.name} \n      handleChecked={this.handleChecked}\n      participating={e.participating}/>)\n    return ( \n      <main>\n        <h1>Willkommen bei super(<span>code</span>):</h1>\n        <h6>Now with React</h6>\n        <h6>Teilnehmeranzahl: {this.state.count}</h6>\n        <section>\n          <div>\n            {allParti}\n            <select className=\"select-css\" name=\"groups\" id=\"groups\" onChange={this.handleRadio}>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n            </select>\n            <button onClick={this.handleSubmit}>Abschicken</button>\n          </div>\n          <div id=\"result\"></div>\n        </section>\n      </main>\n     );\n  }\n}\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}